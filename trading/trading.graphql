type Candle {
    curTime: Timestamp!
    open: Int64!
    close: Int64!
    high: Int64!
    low: Int64!
    volume: Int64!
    openInterest: Int64
}

type CandleChunk {
    code: String!
    name: String!
    keyID: ID!
    startTime: Timestamp!
    endTime: Timestamp!
    candles: [Candle]!
}

type CandleChunkList {
    keyIDs: [ID]!
}

enum ORDERTYPE {
    INVALIDTYPE
    LIMIT
}

enum TRADINGSIDE {
    INVALID_TRADINGSIDE
    TRADING_BUY
    TRADING_SELL
}

type Order {
    orderID: ID!
    orderType: ORDERTYPE!
    side: TRADINGSIDE!
    price: Int64!
    volume: Int64!
    startTime: Timestamp!

    avgPrice: Int64!
    doneVolume: Int64!
    doneTime: Timestamp!
}

type Trade {
    tradeID: ID!
    orderID: ID!
    curTime: Timestamp!
    price: Int64!
    volume: Int64!
}

type TradingData {
    keyID: ID!
    orders: [Order]!
    trades: [Trade]!
}

type MarketTradeData {
    msTime: Int64!
    price: Int64!
    volume: Int64!
    side: TRADINGSIDE!
    marketTradeID: ID!
}

type MarketTradeDataList {
    repeated MarketTradeData trades = 1;
}

type Query {
    candleChunks(code: String!, name: String!, startTime: Timestamp!, endTime: Timestamp!, timeZone: String): CandleChunk!

    tradingData(name: ID!): TradingData!
}

type Mutation {
    newCandleChunk(code: String!, name: String!, startTime: Timestamp!, endTime: Timestamp!, timeZone: String): CandleChunk!
    insertCandle(keyID: ID!, candle: Candle!): CandleChunk!
    insertCandles(keyID: ID!, candles: [Candle]!): CandleChunk!
    clearCandleChunk(name: String): CandleChunkList!

    setTradingData(name: ID!, orders: [Order]!, trades: [Trade]!): TradingData!
}